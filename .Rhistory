id[3]
?read.csv
filename <-paste(filedir,"001.csv",sep="/")
filename
myMonitor <-read.csv(filename,header = TRUE)
myMonitor
class(myMonitor)
str(myMonitor)
levels(myMonitor)
dim(myMonitor)
$dim
names(myMonitor)
nrows(myMonitor)
nrow(myMonitor)
?mean
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
x[3, ] <- NA; x[4, 2] <- NA
x
testmean <-colMeans(x,na.rm = TRUE)
testmean
testmean <-colMeans(x["x2"],na.rm = TRUE)
testmean["x2"]
p <- c(0:10,50)
p
t<-"x2"
t
x
newmean <-mean(x$t)
col2<-x$t
col2<-x$x2
dim(x)
dimnames(x)
mean(x,x[,"x2"],na.rm=TRUE)
mean(x,[,"x2"],na.rm=TRUE)
mean(x,[,2],na.rm=TRUE)
col2<-x$x2
mean(x[["x2]],na.rm=TRUE)
tmean <-mean(x[["x2"]],na.rm=TRUE)
x[["x2"]]
class(x)
str(data.frame(x))
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
x
x[,"x2"]
t<-"x2"
x[,t]
mean(x[,t])
my_matrix
my_data
sum(x[,t])
x[3, ] <- NA; x[4, 2] <- NA
sum(x[,t])
yN <-!isNa(x[,t]))
yN <-x[!is.Na(x[,t])]
yN <-x[!is.na(x[,t])]
yn
yN
yN <-x[!is.na(x[,"x2"])]
yN
x[,"x2"]
yN<-is.na(x[,"x2"])
yN
yN<-subset(x,is.na(x2))
yN<-subset(x,is.na("x2"))
yN
yN<-is.na(x[,"x2"])
yN
yN<-x[,yN]
q<-x[,"x2"]
q
q<-q[yN]
q
q<-q[!yN]
q
yN<-!is.na(x[,"x2"])
yN
q
q<-x[,"x2"]
q
q<-q[yN]
q
AllObs<-c(0)
AllObs<-AllObs + q
AllObs
AllObs<-AllObs + AllObs
AllObs
AllObs<-c(0)
AllObs<-c(AllObs,q)
AllObs<-c(AllObs,q)
AllObs
AllObs<-vector()
AllObs
AllObs<-c(AllObs,q)
AllObs
AllObs<-c(AllObs,q)
AllObs
sum(AllObs)
sum(AllObs)/length(AllObs)
getwd()
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
x
temp<-x[complete.cases(x),]
temp
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
q.length()
x
x.length()
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
AllObst<-data.frame("ID"=integer(),"nobs"=integer())
AllObst
source("complete.R")
complete("specdata", 1)
source("complete.R")
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
source("complete.R")
complete("specdata", c(2, 4, 8, 10, 12))
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc
cc <- complete("specdata", 54)
cc
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use,"nobs"])
use
set.seed(42)
source("complete.R")
cc <- complete("specdata", 332:1)
cc
source("complete.R")
source("complete.R")
cc <- complete("specdata", 332:1)
cc
source("corr.R")
source("corr.R")
source("corr.R")
AllObs
x
m <-x["x1"]
m <- m>3
m
m <-x["x1"]
m
m <-x[,"x1"]
m
m <-x[,"x2"]
m
m <- m>3
m
m <-x[,"x2"]
m
m<-m[x[,"x2"]>3]
m
?cor
source("corr.R")
cr <- corr("specdata", 150)
source("corr.R")
cr <- corr("specdata", 150)
source("corr.R")
cr <- corr("specdata", 150)
cr
source("corr.R")
cr <- corr("specdata", 150)
source("corr.R")
source("corr.R")
cr <- corr("specdata", 150)
cr
tempObs
AllObs
bye()
exit()
q()
getwd()
source("corr.R")
source("corr.R")
corr("specdata",150)
source("corr.R")
source("corr.R")
source("corr.R")
corr("specdata",150)
source("corr.R")
corr("specdata",150)
source("corr.R")
corr("specdata",150)
source("corr.R")
corr("specdata",150)
corr("specdata",150)
source("corr.R")
source("corr.R")
corr("specdata",150)
cr<-corr("specdata",150)
head(cr)
source("corr.R")
cr<-corr("specdata",150)
source("corr.R")
cr<-corr("specdata",150)
cr
source('~/corr.R', encoding = 'UTF-8')
source("corr.R")
cr<-corr("specdata",150)
cr
source("corr.R")
cr<-corr("specdata",150)
cr
source("corr.R")
cr<-corr("specdata",150)
cr
source("corr.R")
cr<-corr("specdata",150)
cr
source("corr.R")
cr<-corr("specdata",150)
head(cr)
summary(cr)
source("corr.R")
cr<-corr("specdata",150)
?cor
source("corr.R")
cr<-corr("specdata",150)
cr
head(cr)
source("corr.R")
cr<-corr("specdata",150)
head(cr)
source("corr.R")
cr<-corr("specdata",150)
head(cr)
summary(cr)
cr<-corr("specdata",400)
head(cr)
summary(cr)
cr<-corr("specdata",5000)
summary(cr)
length(cr)
cr<-corr("specdata")
summary(cr)
length(cr)
source("corr.R")
cr<-corr("specdata",150)
head(cr)
summary(cr)
cr<-corr("specdata",400)
head(cr)
summary(cr)
cr<-corr("specdata",5000)
summary(cr)
length(cr)
class(cr)
attributes(cr)
dim(cr)
names(cr)
cr<-corr("specdata",400)
dimnames(cr)
class()
class(cr)
dim(cr)
typeof(cr)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
source("complete.R")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc
cc <- complete("specdata", 54)
cc
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cc
use
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
q()
getwd()
setwd('C:\Users\admin\Documents\Learning\Data Science Collect\Coursera\JHU\2R Programming\RPrograms')
setwd('C:\Users\admin\Documents\Learning\Data Science Collect\Coursera\JHU\2R Programming\RPrograms')
setwd('C:\\Users\\admin\\Documents\\Learning\\Data Science Collect\\Coursera\\JHU\\2R Programming\\RPrograms')
getwd()
swirl()
library('swirl')
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_list <- sapply(flags,class)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <-lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok90
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,sum)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
library(datasets)
data(iris)
?iris
class(iris)
str(iris)
vapply(iris$Sepal.Length,iris$Species,summary)
levels(iris$Species)
vapply(iris$Sepal.Length,levels(iris$Species),summary)
?vapply
?tapply
tapply(iris$Sepal.Length,iris$Species,summary)
?apply
apply(iris,1,mean)
apply(iris,2,mean)
apply(iris[,1:4],2,mean)
apply(iris[,1:4],1,mean)
library(datasets)
data("mtcars")
?mtcars
str(mtcars)
tapply(mtcars$mpg,mtcars$cyl,mean)
with(mtcars,tapply(mpg,cyl,mean))
sapply(mtcars,cyl,mean)
apply(mtcars,2,mean)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
mean(mtcars$mpg,mtcars$cyl)
?abs
abs(tapply(mtcars$hp,mtcars$cyl,mean))
tapply(mtcars$hp,mtcars$cyl,mean)
result <- tapply(mtcars$hp,mtcars$cyl,mean)
result
abs(result[["4"]]-result[["8"]])
?debug
?iris
tapply(iris$Sepal.Length,iris$Species,summary)
apply(iris[,1:4],2,mean)
colmeans(iris)
colMeans(iris)
abs(result[["4"]]-result[["8"]])
setwd('C:\Users\admin\Documents\Learning\Data Science Collect\GitPublic\ProgrammingAssignment2')
setwd('C:\\Users\\admin\\Documents\\Learning\\Data Science Collect\\GitPublic\\ProgrammingAssignment2')
source("cachematrix.R")
makeVector(c(1,2,3))
makeVector()
makeVector(c(1,2,3))
cachemean(c(1,2,3))
cachemean()
test <- c(1:5)
test
makeVector(test)
spv <-makeVector(test)
spv
spv$get()
spv$getmean()
spv$setmean()
environment()
g <- function(x) {
if (!exists("a", inherits = FALSE)) {
message("Defining a")
a <- 1
} else {
a <- a + 1
}
a
}
g(10)
x
source("cachematrix.R")
makeCacheMatrix$get()
fun <-makeCacheMatrix()
str(fun)
environment()
traceback()
x
fun$get()
fun$x
fun$inverse
fun$set(matrix(1:4,2))
fun$inverse
fun$x
x
fun$get()
environment(fun)
traceback()
traceback(fun)
fun$get()
new_counter <- function() {
i <- 0
function() {
# do something useful, then ...
i <<- i + 1
i
}
}
counter_one() <- new_counter()
counter_one <- new_counter()
counter_one()
counter_one <- new_counter()
counter_one()
counter_one()
counter_one()
source("cachematrix.R")
fun <- makeCacheMatrix()
fun$get()
fun$set(matrix(1:4,2))
fun$get()
fun$getInv()
fun$setInv(matrix(1:4,2))
fun$getInv()
cacheSolve(matrix(1:4,2))
tmatrix <- matrix(1:4,2)
cacheSolve(tmatrix)
fun$set(tmatrix)
cacheSolve(tmatrix)
tmatrix <- fun$set(matrix(1:4,2))
cacheSolve(tmatrix)
traceback()
source("cachematrix.R")
source("cachematrix.R")
fun <- makeCacheMatrix()
tmatrix <- fun$set(matrix(1:4,2))
cacheSolve(tmatrix)
source("cachematrix.R")
fun <- makeCacheMatrix()
cacheSolve(fun$set(matrix(1:4,2)))
?solve
source("cachematrix.R")
fun <- makeCacheMatrix()
cacheSolve(fun$set(matrix(1:4,2)))
debugSource('~/Learning/Data Science Collect/GitPublic/ProgrammingAssignment2/cachematrix.R')
cacheSolve(fun$set(matrix(1:4,2)))
# get the cached inverse matrix
invmtrx <- x$getInv()
mat <- matrix(data = c(4,2,7,6), nrow = 2, ncol = 2)
mat2 <- makeCacheMatrix(mat)
cacheSolve(mat2)
source("cachematrix.R")
mat <- matrix(data = c(4,2,7,6), nrow = 2, ncol = 2)
mat2 <- makeCacheMatrix(mat)
cacheSolve(mat2)
q()
